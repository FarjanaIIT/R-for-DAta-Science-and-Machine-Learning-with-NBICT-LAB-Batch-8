name = c("Kamal", "Jamal", "Ramal", "Humen", "Kamal", "Hamal", "Qamal", "Sumen", "Juthi", "Bithi")
glucose_level = c(4.5, 5.6, 7.8, 7.6, 4.5, 6.7, 9.0, 10, 2.9, 10)
sua_level = c(5, 6, 7, 8, 9, 10, 7, 8, 9, 13)
mydata = data.frame(id, name, glucose_level, sua_level)
names(mydata)
summary(mydata)
names(mydata)
names(mydata) <- c("id", "age", "sex", "school")  # variable names
mydata
names(mydata)
mydata
dim(mydata)
# There are various ways to identify elements of a data frame.
mydata[2:3]               # columns 2,3 of data framemydata[1,4]
# There are various ways to identify elements of a data frame.
mydata[2:3]              # columns 2,3 of data framemydata[1,4]
mydata$id                 # variable id in the data frame
mydata$id[1]               # variable id in the data frame
# There are various ways to identify elements of a data frame.
mydata[2:3]              # columns 2,3 of data framemydata[1,4]
table(mydata$sex)
summary(mydata)
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
mode(dataset)
library(DescTools)
mode(dataset)
library(psych)
attach(psych)
attach("psych")
library("psych")
describe(dataset)
library("DescTools")
describe(dataset)
mode(dataset)
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
library(ggplot2)
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7, color = "red", fill = "red")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
myCarData = mtcars
View(myCarData)
View(myCarData)
View(dataset)
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "count", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
mtcars
ggplot(myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
mycardata = mtcars
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = (cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = numeric(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
mycardata = mtcars
View(myCarData)
ggplot(data = mycardata, aes(x = (cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
install.packages(writexl)
install.packages("writexl")
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
dataset = read.csv(my_data.csv)
library(ggplot2)
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len, fill = len)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic() +
geom_text(aes(label = len), vjust = 0.5, color = "blue")
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") + theme_classic() +
geom_text(aes(label = len), vjust = 0.5, color = "blue")
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") + theme_classic() +
geom_text(aes(label = len), vjust = 0.5, color = "blue") +
scale_color_brewer(palette = "Dark2" )
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") +
geom_text(aes(label = len), vjust = 0.5, color = "blue") +
scale_color_brewer(palette = "Dark2" )
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") +
geom_text(aes(label = len), vjust = 0.5, color = "blue")
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "white") +
scale_color_brewer(palette = "Dark2") # search on color brewer pallets in r.
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", color = "blue") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "white") +
scale_color_manual(values = c("white", "red", "blue"))  # search on hexadecimal color picker
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", color = "blue") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
ggplot(dataset, aes(x = dose, y = len, fill = dose, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p
p + scale_fill_manual(values = c("white", "red", "black"))
p = ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
p + scale_fill_manual(values = c("white", "red", "blue"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity") +
theme_minimal()
p + scale_fill_manual(values = c("white", "red", "blue"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
p = ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
library(ggplot2)
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
myData$dose = as.factor(myData$dose)
myData = ToothGrowth
myData$dose = as.factor(myData$dose)
class(myData$dose)
# Basic boxplot
library(ggplot2)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_barplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_barplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_barplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_bar()
ggplot(myData, aes(x = dose, y = len)) +
geom_bar(stat = identity)
ggplot(myData, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot(myData, aes(x = dose, y = len)) +
geom_bar(stat = "count")
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot() +
coord_flip()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = F)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() +
scale_x_discrete(limits = c("2", "0.5"))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() + coord_flip() +
scale_x_discrete(limits = c("2", "0.5"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3)
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
setwd("/Users/farjanaislam/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-43 👉 Two-way ANOVA in R (Part-5) ")
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
# Coerce types safely
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
theme_set(theme_classic(base_size = 12))
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
# Coerce types safely
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
m <- aov(y ~ fert * irr, data = d)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
m <- aov(y ~ fert * irr, data = d)
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
theme_set(theme_classic(base_size = 12))
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
# Coerce types safely
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
print(with(d, table(fert, irr)))
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
m <- aov(y ~ fert * irr, data = d)
summary(m)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
## ── 4) Model diagnostics & assumptions ----
# Visual checks
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
# Targeted tests (use as guidance, not hard gates)
res <- residuals(m)
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))  # plots/flags common issues
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
# Comprehensive diagnostics (performance)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))  # plots/flags common issues
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))
## ── 5) Estimated marginal means (EMMs) & contrasts ----
emm_int <- emmeans(m, ~ fert * irr)
# Simple effects: fert within each irr (with Tukey adj)
fert_within_irr <- contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
cat("\nPairwise fert within each irr:\n"); print(fert_within_irr)
# Simple effects: irr within each fert (with Tukey adj)
irr_within_fert <- contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
cat("\nPairwise irr within each fert:\n"); print(irr_within_fert)
# Main-effect comparisons (interpret only if interaction is negligible!)
emm_fert <- emmeans(m, ~ fert)
emm_irr  <- emmeans(m, ~ irr)
library(effectsize)
# From the model table (Type III to match tests above)
eta_squared(m, partial = FALSE, alternative="two.sided")
eta_squared(m, partial = TRUE)
omega_squared(m)
print(p_emm)
# Plot EMMs + CLD letters
emm_df <- as.data.frame(cld_letters)
p_emm <- ggplot(emm_df, aes(irr, emmean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL),
width=.15, position=position_dodge(width=.3)) +
geom_text(aes(label=.group), vjust=-1.1, position=position_dodge(width=.3), show.legend = FALSE) +
labs(title="EMMs ± 95% CI with CLD letters", x="Irrigation", y="Estimated marginal mean")
print(p_emm)
