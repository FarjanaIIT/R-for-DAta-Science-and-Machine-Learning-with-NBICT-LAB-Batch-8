mode(student_data)
median(student_data)
mean(student_data)
colnames(student_data_matrix) = matrix(Hours, Marks)
colnames(student_data_matrix) = c(Hours, Marks)
colnames(student_data_matrix) = c("Hours", "Marks")
colnames(student_data_matrix) = matrix("Hours", "Marks")
colnames(student_data) = c("Hours", "Marks")
colnames(student_data) = c(Hours, Marks)
colnames(student_data_matrix) = c(Hours, Marks)
colnames(student_data_matrix) = c("Hours", "Marks")
student_data_matrix = matrix(student_data, byrow = FALSE, nrow = 10)
student_data_matrix
colnames(student_data_matrix) = c("Hours", "Marks")
student_data_matrix
rownames(student_data_matrix) = c(1:10)
student_data_matrix
colnames(student_data_matrix) = c("Time", "Score")
student_data_matrix
a = 11
b = 7.19
class(a)
class(b)
print(name)
name = 'Farjana Islam'
print(name)
class(name)
class(c)
c = '52' # if I don't want to involve into mathamateical.
print(c + 9)
c = '52'
class(c)
# Logical Data Type - TRUE, FALSE (T, F)
print(a < b) # < is called relational operator
x = 19 # 19n is assigned to x
y = 22-3
print(x == y) # == is called equal to operator
print(x !=y) # == is called not equal to operator
print(y > x)
print(y >=x) # >= is called greater than equal to operator
4 == 4 && 5 ==5
4 == 5 && 5 ==5
x = 19 # 19n is assigned to x
y = 22-3
x != y || x == y
z = 6 + 9 - 8 * (2 / 3)
print(z)
summary(z)
print(z)
w = 4 + 3 -3 * 2 / 3
print(w)
y = 4^3
print(y)
11 / 5 # modulo operator,
11 %/% 5 # if we don't want to see decimal.
11 %% 5 # to see remainer
11 %/% 5
11 %% 5
11 / 5
x = (my_height * my_age) / my_weight
# Calculating some health parameter
my_age = 97
my_weight = 60
my_height = 65
x = (my_height * my_age) / my_weight
print(x)
print(x)
print(x)
summary(x)
mean(x)
print(students_height)
students_height = c(50, 55, 64, 71, 45.25)
print(students_height)
median(students_height)
mode(students_height)
class(students_height)
students_height_new = as.character(students_height)
students_height_new
students_height_new = as.logical(students_height)
students_height_new
# Creating a vector using the c() command, if I want to keep multiple values in one variable
student_height = c(60, 69, 55, 62)
student_height
# check the class of vectors student_height
is.numeric(student_height) # whether it is numeric data type, it will logical data
is.logical(student_height) # if I check it is logical data type, it will logical data
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
d
d = as.logical(d)
d
e = c(1, 0, 0, 1, 0, 23, -7, 0)
e = as.logical(e)
e
# Creating sequential vector by using clone using c() command
# Creating a vector starting from 1 to 10
my_seq = c(1:50, 80, 99, 88, 60, 77, 71, 61, 92, 97) # if I want to give break
my_seq
# Creating sequential vector using seq() function
new_seq = c(seq(1,10))
# sequence in steps of 3 by using "by" parameter
new_seq = c(seq(1, 10, by=3))
new_seq
class(names)
class(names)
# vectors can have character
names = c("Elias", "Mahfuza", "Asraf")
class(names)
names[1:3] # we can say ranges by using clone
# Assigning names to vector values
my_values = c(4, 7, 9, 11)
names(my_values) = c("a", "b", "c", "d")
my_values
my_values["d"]
print(my_values)
student_height = c(60, 69, 55, 62)
student_height
# check the class of vectors student_height
is.numeric(student_height) # whether it is numeric data type, it will logical data
is.logical(student_height) # if I check it is logical data type, it will logical data
student_height_new = as.character(student_height)
student_height_new
b = c(5, 8, 2, "sv")
b
is.numeric(b)
is.logical(b)
is.character(b)
# we can convert data types
# for example from numeric to character
a = c(1, 2, 3, 4, 5)
class(a)
class(student_height)
is.numeric(a)
a = as.character(a) # way of update the conversion of data type from numeric to string
class(a)
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
student_height_new
d = as.numeric(d)
d
d = c(1, 0, 9, 8, -1, 0, 0)
d_new = as.numeric(d)
d_new
my_seq = c(1:50)
my_seq
my_seq = c(seq(1,10, 12, 13))
my_seq = c(seq(1,10)
my_seq
new_seq = c(seq(1,10)
new_seq
new_seq = c(seq(1,50)
new_seq
new_seq = c(seq(1,50))
new_seq
new_seq = c(seq(1,5, 10, 9, 20))
new_seq = c(seq(1,5, 10, 11, 12))
new_seq = c(seq(1,5,10,11,12))
new_seq = c(seq(1:5,10,11,12))
new_seq
new_seq = c(seq(1:5,10,11,12))
new_seq
my_seq = c(seq(1,5))
my_seq
my_seq = c(seq(1,5, by = 2))
my_seq
my_seq = c(1:3, 4, 5, 6)
my_seq
names = c("Abid", "Elisas", "Juthi")
names[1]
is.numeric(names)
names = as.logical(names)
names
abid = c(TRUE, FALSE, FALSE)
names = as.logical(abid)
names
summary(names)
names[1:2]
my_list
my_list = list(a, b, c)
names(my_list) = list(2, 4, 7)
my_list
my_values = c(2, 4, 7)
names(my_values) = c("a", "b", "c")
my_values
my_values[2]
my_values["b"]
my_values["c"]
my_list = list(1, 2, 3, 45, 5)
names(my_list) = list("a", "b", "c", "d", "e")
my_list
my_list$b
my_list[2]
a = c(1, 2, 3)
b = c("Abid", "Juthi", "Rahim")
c = "Welcome"
my_list = list(a, b, c)
names(my_list) = list(pieces = a, names = b, text =c)
my_list
a = c(1, 2, 3)
b = c("Abid", "Juthi", "Rahim")
c = "Welcome"
my_list = list(a, b, c)
names(my_list) = list(pieces = a, names = b, text =c)
my_list
a = c(2, 4, 7)
b = c("Red", "Green", "Blue")
c = "welcome!"
my_list = list(a, b, c)
my_list
a = c(1, 2, 3)
b = c("Abid", "Juthi", "Rahim")
c = "Welcome"
my_list = list(a, b, c)
names(my_list) = list(pieces = a, names = b, text =c)
my_list
my_list = list(pieces = a, names = b, text =c)
my_list
names(my_list) = list(pieces = a, names = b, text =c)
my_list
my_list = list(pieces = a, names = b, text =c)
my_list
my_list[a]
my_list[a]
my_list$pieces
my_list$names[2]
a
b
c
hist(a)
library(nycflights13)
remove.packages("nycflights13")
install.packages("nycflights13")
attach(nycflights13::flights)
library(nycflights13)
attach(nycflights13::flights)
library(nnet)
library(nnet)
data
data
attach(nycflights13::flights)
attach(nycflights13 :: flights)
install.packages("nycflights13")
library(nycflights13)
remove.packages("nycflights13")
install.packages("nycflights13")
nycflights13
library(nycflights13)
library(mnormt)
detach("package:nycflights13", unload = TRUE)
library(nycflights13)
detach("package:nycflights13", unload = TRUE)
remove.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
attach(nycflights13::flights)
library(nycflights13)
View(flights)
detach("package:nycflights13", unload = TRUE)
remove.packages("nycflights13")
install.packages("nycflights23")
library(nycflights23)
attach(nycflights23::flights)
install.packages("nycflights13")
library(nycflights13)
head(nycflights23::flights)
summary(distance)
describe(distance)
describe(distance)
summary(distance)
library(nycflights13)
View(flights)
head(nycflights23:flights)
summary(distance)
head(nycflights13:flights)
summary(distance)
library(nycflights13)
View(flights)
attach(nycflights13::flights)
head(nycflights13::flights)
View(flights)
summary(distance)
head(nycflights13::flights)
summary(distanc)
summary(distance)
summary(distanc)
summary(distance)
library(nycflights13)
View(flights)
library(tools)
library(rlang)
install.packages(rlang)
install.packages(rlang)
library(nycflights13)
install.packages(rlang)
exists("describe", mode = "function")
library(psych)
exists("describe", mode = "function")
describe(flights)
library(rlang)
install.packages("rlang")
library(rlang)
summary(nycflights23::flights)
distance(flights)
describe(flights)
library(nycflights23)
attach(nycflights23::flights)
summary(nycflights23)
library(nycflights13)
xcode-select --install
describe(flights)
library(R6)
install.packages(rlang)
install.packages(rlang)
install.packages("rlang")
remove.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13::flights)
attach(nycflights13::flights)
install.packages("pillar")
library(rlang)
library(pillar)
library(nycflights13)
head(nycflights13:flights)
attach(nycflights13::flights)
head(nycflights13::flights)
summary(distanc)
head(nycflights13::flights)
summary(distance)
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
install.packages("stringi")
install.packages("xml2")
library(xml2)
summary(flights)
describe(distance)
describe(flights)
describe(distance)
View(demo)
install.packages("skimr")
library(skimr)
skim(your_data)
skim(iris)
library(psych) # it will give functionality of descriptive statistics, not any datasets
data()
attach(nycflights13::flights) # it gives datasets, needs to give attach
describe(distance) # describe function will not give details, function of psych package.
demo = cbind(arr_delay, dep_delay, distance) # if I want to bind column, needs to use cbind function
describe(demo)
frequency(distance)
frequency(demo)
dim(data)
dim(distance)
str(data)
str(distance)
# Introducing the colnames() function
colnames(demo) = c('Arrival delay', 'Departure delay', 'Distance travelled')
describe(demo)
# install.packages("psych")
library(psych)
describe(demo)
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
describe(demo)
library(nycflights13)
describe(demo)
distance
summary(distance)
describe(distance)
describe(demo)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
# Introducing the colnames() function
colnames(demo) = c('Arrival delay', 'Departure delay', 'Distance travelled')
describe(demo)
hist(distance)
summary(carrier)
carrier_factor = as.factor(carrier)
summary(carrier_factor)
describeBy(distance, group = carrier)
install.packages("ggplot2")
describeBy(distance, group = carrier)
aggregate(distance, by = list(carrier, month), FUN = mean, na.rm = TRUE) # remove of missing data to get accurate mean
aggregate(distance, by = list(carrier, month), FUN = sd, na.rm = FALSE)
library(ggplot2)
aggregate(distance, by = list(carrier, month), FUN = mean, na.rm = TRUE)
aggregate(arr_delay, by = list(carrier, month), FUN = mean, na.rm = TRUE)
aggregate(arr_delay, by = list(carrier, month), FUN = sd, na.rm = TRUE)
aggregate(arr_time, by = list(carrier), FUN = mean, na.rm = TRUE)
demo
colnames()
colnames(demo)
colnames(demo) = c("Arrival delay", "Depart delay", "Dist travel")
summary(demo)
describeBy(flights, group = month)
describeBy(distance, group = carrier)
describeBy(arr_delay, group = carrier)
describeBy(arr_delay, group = carrier_factor)
describe(carrier)
summary(carrier)
carrier_factor = factor(carrier)
summary(carrier_factor)
describe(carrier)
describe(arr_delay)
describeBy(arr_time, group = carrier)
hist(carrier)
hist(month)
hist(arr_time)
demo = cbind(arr_delay, dep_delay)
summary(demo)# Introducing the colnames() function
colnames(demo) = c("arrival", "departure")
describe(demo)# Introducing the hist() function
describeBy(distance, by = carrier)
describeBy(distance, group = carrier)
aggregate(distance, by = list(carrier), FUN = mean, na.rm = TRUE)
describeBy(distance, group = carrier)
aggregate(distance, by = list(month), FUN = mean, na.rm = TRUE)
setwd("/Users/farjanaislam/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-11 👉 Scatter Plot in R (Part-2)")
library(ggplot2)
dataset = mtcars
View(dataset)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=4, shape = 7) +
geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=2, shape = 4) +
geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=2, shape = 4) +
geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=2, shape = 4) +
geom_smooth(method = lm, linetype = "dashed")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=2, shape = 3) +
geom_smooth(method = lm, linetype = "dashed")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape = 3) +
geom_smooth(method = lm, linetype = "dashed")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape = 18) +
geom_smooth(method = lm, linetype = "dashed")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape = 18) +
geom_smooth(method = lm, linetype = "dashed",
color = "darkred")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18) +
geom_smooth(method = lm, linetype = "dashed",
color = "darkred")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18) +
geom_smooth(method = lm, linetype = "dotted",
color = "darkred")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18) +
geom_smooth(method = lm, linetype = "hyphened",
color = "darkred")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18) +
geom_smooth(method = lm, linetype = "dotted",
color = "darkred")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18) +
geom_smooth(method = lm, linetype = "dotted",
color = "darkgreen")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18) +
geom_smooth(method = lm, linetype = "dotted",
color = "darkgreen", fill = "blue")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape = 18, color = "blue") +
geom_smooth(method = lm, linetype = "dotted",
color = "darkgreen", fill = "blue")
dataset$cyl
class(dataset$cyl)
dataset$cyl = as.factor(dataset$cyl)
class(dataset$cyl)
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl)) +
geom_point()
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x = wt, y = mpg, shape = gear)) +
geom_point()
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point(size = 4)
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point(size = 4, shape = 2)
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point(size = 4)
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl, size = cyl)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, size = cyl)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg, size = cyl)) +
geom_point()
