5+5
5+6
5+5
5+5
5+6
ata = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x/2
summary(data)
data = c(9, 6, 17, 31, 11)
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
setwd("~/")
setwd("~/")
x=(my_height*my_age)/my_weight
x=(my_height*my_age)/my_weight
# Calculating some health parameter
my_age = 97
my_weight = 60
my_height = 65
x=(my_height*my_age)/my_weight
print(x)
students_height = c(50, 55, 64, 71, 45.25)
mean(students_height)
my_age=97
my_weight=60
my_height=65
x=(my_height*my_age)/my_weight
print(x)
students_height=c(50, 55, 64, 71, 45.25)
mean(students_height)
My_age=97
# Calculating some health parameter
My_age=97
My_age=97
My_weight=60
My_height=65
x=(my_height*My_age)/My_weight
print(x)
My_Age=97
# Data types in R
# 1. Numeric - Integer/ Floating point
# 2. String/character - "Farjana Islam" / 'Farjana Islam'
# 3. Logical
a = 11
b = 7.19
class(a)
class(b)
name = 'Farjana Islam'
print(name)
class(name)
c = '52'
print(c + 9)
print(a + 9)
class(c)
# Logical Data Type - TRUE, FALSE (T, F)
print(a < b)
x = 19
y = 22-3
print(x == y)
print(x !=y)
print(y > x)
print(y >=x)
# Logical Operators in R
# && Logical Operator
# || Logical Operator
4 ==4 && 5 ==5
x != y || x == y
# simple Mathematics Operators in R
z = 6 + 9 - 8 * (2 / 3)
print(z)
w = 4 + 3 -3 * 2 / 3
print(w)
y = 4^3
print(y)
11 / 5
11 %/% 5
print(a + 9)
class(c)
x
y
. T || F
TRUE || FALSE
11 / 5 # moduleo operator, to see remainer
11 %/% 5
11 %% 5
print(c)
c = (52, 54, 67)
print(c)
c = (52 + 54)
print(c)
# Logical data is TRUE or FALSE
# Relational Operator ==, !=, >, >=. from here we get logical data.
# Logical operator is used to compare between logical data type for examples, we will get TRUE or FALSE.
# For example && and ||, it will give only logical data. && will give True when both side contain true, while || will give Flase when both side have False
# Data three types- Numeric (Integer/Floating point), String/character, Logical data.
# Modulo operator %%, %/%. If I don't want
11/4
11 %% 4
11 %/% 4
c = (52, 54, 67)
print(c)
c = (52 + 54)
print(c)
# Logical data is TRUE or FALSE
# Relational Operator ==, !=, >, >=. from here we get logical data.
# Logical operator is used to compare between logical data type for examples, we will get TRUE or FALSE.
# For example && and ||, it will give only logical data. && will give True when both side contain true, while || will give Flase when both side have False
# Data three types- Numeric (Integer/Floating point), String/character, Logical data.
# Modulo operator %%, %/%. If I don't want
11/4
11 %% 4
11 %/% 4
setwd("~/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-5 ðŸ‘‰ Vectors in R")
# Creating a vector using the c() command, if I want to keep multiple values in one variable
student_height = c(60, 69, 55, 62)
student_height
# check the class of vectors student_height
is.numeric(student_height) # whether it is numeric data type
is.logical(student_height)
# R automatically converts numeric to text when you have a text item in the vector
b = c(5, 8, 2, "sv") # if i create one vectors combinedly
b
is.numeric(b)
is.logical(b)
is.character(b)
# we can convert data types
# for example from numeric to character
a <- c(1, 2, 3, 4, 5)
class(a)
class(student_height)
is.numeric(a)
as.character(a)
class(a)
a = c(1, 2, 3, 4, 5)
class(a)
is.numeric(a)
a = as.character(a)
a = as.character(a)
class(a)
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
d
# If want to converting numeric to logical data (1 or any number)
#other than zero, converts to TRUE, O converts to FALSE
d
class(d)
d = as.logical(d)
d
e = c(1, 0, 0, 1, 0, 23, -7, 0)
e = as.logical(e)
e
# Creating sequential vector
# Creating a vector starting from 1 to 10
my_seq = c(1:10)
my_seq
# Creating sequential vector
# Creating a vector starting from 1 to 10
my_seq = c(1:100)
my_seq
# Creating sequential vector by using clone using c() command
# Creating a vector starting from 1 to 10
my_seq = c(1:50, 80, 99, 88, 60, 77) # if I want to give break
my_seq
# Creating sequential vector by using clone using c() command
# Creating a vector starting from 1 to 10
my_seq = c(1:50, 80, 99, 88, 60, 77, 71, 61, 92, 97) # if I want to give break
my_seq
# Creating sequential vector using seq() function
new_seq = c(seq(1,10))
new_seq
# sequence in steps of 3
new_seq = c(seq(1, 10, by=3))
new_seq
# vectors can have character
names = c("Elias", "Mahfuza", "Asraf")
class
class(names)
names[3]
names[2:3]
names[1:3]
# Assigning names to vector values
my_values = c(4, 7, 9, 11)
names(my_values) = c("a", "b", "c", "d")
my_values
my_values["c"]
my_values["d"]
