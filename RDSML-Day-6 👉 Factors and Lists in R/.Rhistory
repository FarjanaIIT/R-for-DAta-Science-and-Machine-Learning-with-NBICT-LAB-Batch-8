5+5
5+6
5+5
5+5
5+6
ata = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x/2
summary(data)
data = c(9, 6, 17, 31, 11)
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
setwd("~/")
setwd("~/")
x=(my_height*my_age)/my_weight
x=(my_height*my_age)/my_weight
# Calculating some health parameter
my_age = 97
my_weight = 60
my_height = 65
x=(my_height*my_age)/my_weight
print(x)
students_height = c(50, 55, 64, 71, 45.25)
mean(students_height)
my_age=97
my_weight=60
my_height=65
x=(my_height*my_age)/my_weight
print(x)
students_height=c(50, 55, 64, 71, 45.25)
mean(students_height)
My_age=97
# Calculating some health parameter
My_age=97
My_age=97
My_weight=60
My_height=65
x=(my_height*My_age)/My_weight
print(x)
My_Age=97
# Data types in R
# 1. Numeric - Integer/ Floating point
# 2. String/character - "Farjana Islam" / 'Farjana Islam'
# 3. Logical
a = 11
b = 7.19
class(a)
class(b)
name = 'Farjana Islam'
print(name)
class(name)
c = '52'
print(c + 9)
print(a + 9)
class(c)
# Logical Data Type - TRUE, FALSE (T, F)
print(a < b)
x = 19
y = 22-3
print(x == y)
print(x !=y)
print(y > x)
print(y >=x)
# Logical Operators in R
# && Logical Operator
# || Logical Operator
4 ==4 && 5 ==5
x != y || x == y
# simple Mathematics Operators in R
z = 6 + 9 - 8 * (2 / 3)
print(z)
w = 4 + 3 -3 * 2 / 3
print(w)
y = 4^3
print(y)
11 / 5
11 %/% 5
print(a + 9)
class(c)
x
y
. T || F
TRUE || FALSE
11 / 5 # moduleo operator, to see remainer
11 %/% 5
11 %% 5
print(c)
c = (52, 54, 67)
print(c)
c = (52 + 54)
print(c)
# Logical data is TRUE or FALSE
# Relational Operator ==, !=, >, >=. from here we get logical data.
# Logical operator is used to compare between logical data type for examples, we will get TRUE or FALSE.
# For example && and ||, it will give only logical data. && will give True when both side contain true, while || will give Flase when both side have False
# Data three types- Numeric (Integer/Floating point), String/character, Logical data.
# Modulo operator %%, %/%. If I don't want
11/4
11 %% 4
11 %/% 4
c = (52, 54, 67)
print(c)
c = (52 + 54)
print(c)
# Logical data is TRUE or FALSE
# Relational Operator ==, !=, >, >=. from here we get logical data.
# Logical operator is used to compare between logical data type for examples, we will get TRUE or FALSE.
# For example && and ||, it will give only logical data. && will give True when both side contain true, while || will give Flase when both side have False
# Data three types- Numeric (Integer/Floating point), String/character, Logical data.
# Modulo operator %%, %/%. If I don't want
11/4
11 %% 4
11 %/% 4
# Vectors (data structure) in R
# Creating a vector using the c() command, if I want to keep multiple values in one variable
student_height = c(60, 69, 55, 62)
student_height
# check the class of vectors student_height
is.numeric(student_height) # whether it is numeric data type, it will logical data
is.logical(student_height) # if I check it is logical data type, it will logical data
# R automatically converts numeric to text when you have a text item in the vector or combinedly write numeric plus text.
b = c(5, 8, 2, "sv") # if i create one vectors combinedly text and numeric, it will give the class of data as string
b
is.numeric(b)
is.logical(b)
is.character(b)
# we can convert data types
# for example from numeric to character
a = c(1, 2, 3, 4, 5)
class(a)
class(student_height)
is.numeric(a)
a = as.character(a) # way of update the conversion of data type from numeric to string
class(a)
# Logical operator TRUE and FALSE when converted to numeric, TRUE converts to 1, FALSE converts to 0
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
d
# If want to converting numeric to logical data (1 or any number)
#other than zero, converts to TRUE, O converts to FALSE
d
class(d)
d = as.logical(d)
d
e = c(1, 0, 0, 1, 0, 23, -7, 0)
e = as.logical(e)
e
# Creating sequential vector by using clone using c() command
# Creating a vector starting from 1 to 10
my_seq = c(1:50, 80, 99, 88, 60, 77, 71, 61, 92, 97) # if I want to give break
my_seq
# Creating sequential vector using seq() function
new_seq = c(seq(1,10))
new_seq
# sequence in steps of 3 by using "by" parameter
new_seq = c(seq(1, 10, by=3))
new_seq
# vectors can have character
names = c("Elias", "Mahfuza", "Asraf")
class(names)
names[1:3] # we can say ranges by using clone
# Assigning names to vector values
my_values = c(4, 7, 9, 11)
names(my_values) = c("a", "b", "c", "d")
my_values
my_values["d"]
is.numeric(student_height)
is.logical(student_height)
is.numeric(b)
is.logical(b)
is.character(b)
student_height = as.character(student_height)
student_height
class(d)
is.logical(d)
d = as.character(d)
d
d = as.numeric(d)
d = as.numeric(d)
d
d = as.numeric(d)
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
d
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
d
e = c(TRUE, FALSE, TRUE, FALSE, TRUE)
e
e = as.numeric(e)
e
# Numeric converts into logical, 1 converts to TRUE, 0 converts to FALSE
f = c(1, 0, 1, 0, 0, 1)
f = as.logical(f)
f
# Character converts to numeric, MALE converts to 1, FEMALE converts to 2
gender = c(MALE, FEMALE, MALE, FEMALE)
# Character converts to numeric, MALE converts to 1, FEMALE converts to 2
gender = c(male, female, male, female)
# Character converts to numeric, MALE converts to 1, FEMALE converts to 2
gender = c(TRUE, FALSE, TRUE, FALSE)
gender = as.character(gender)
gender
a = c(1, 2, 3, 4, 5)
a
a = as.character(a)
a
is.numeric(a)
e = c(1, 0, 0, 1, 0, 23, -7, 0)
e = as.logical(e)
e
seq = c(1:10)
seq
seq = c(1:10, 15, 20)
seq
print(seq)
seq = c(seq(1,16))
seq
seq = c(seq(1,16, by=4))
seq
seq = c(1:12)
seq
seq = c(seq(1,12, by=2))
seq
s = c(1:5)
s
s = c(seq(1,5, by=1.5))
s
names[1:3]
my_values
my_values["d"]
values = c(4, 5, 56, 7, 8)
character(values) = c("abid", "farzana", "mita", "gita", "shita")
values
my_values = c(4, 5, 56, 7, 8)
names(values) = c("abid", "farzana", "mita", "gita", "shita")
my_values
my_values[7]
my_values = c(4, 5, 56, 7, 8)
names(values) = c("a", "f", "m", "g", "s")
my_values
my_values[7]
# assigning names to vector values
my_values = c(4, 5, 56, 7, 8)
names(values) = c("a", "f", "m", "g", "s")
my_values
my_values[7]
my_values["g"]
my_values = c(4, 7, 9, 11)
names(my_values) = c("a", "b", "c", "d")
my_values
my_values["d"]
names[1:2] # we can say ranges by using clone
names[1,2] # we can say ranges by using clone
names[1:2] # we can say ranges by using clone
my_values = c(4, 5, 56, 7, 8)
names(my_values) = c("a", "f", "m", "g", "s")
my_values
my_values["g"]
values = c(4, 5, 7, 8)
new_values(values) = c("abid", "far", "zen", "gen")
values
values[5]
my_values = c(1,2, 3, 4)
names(my_values) = c("a", "b", "d", "e")
my_values
my_values[3]
my_values[4]
my_values["e"]
is.logical(my_values)
my_values = as.character(my_values)
my_values
my_values = as.logical(my_values)
my_values
my_values = c(1,0, 0, 0)
my_values = as.logical(my_values)
my_values
my_values = c(1,0, 0, 10)
my_values = as.logical(my_values)
my_values
seq = c("a", "b", "c")
seq = c[1:3]
seq = [1:3]
seq = c("a", "b", "c")
seq = [1:3]
names = c("a", "b", "c")
names = c[1:2]
names = c("a", "b", "c")
names[1:2]
seq = c(1;12)
seq
seq = c(1:12)
seq
seq = seq(c(1,12,by=2))
seq
seq = seq(c(1,12,by=2))
seq
seq = c(1:12)
seq
seq = seq(c(1,12,by=2))
seq
seq = c(seq(1,5))
seq
seq = c(seq(1,5,by=2))
seq
seq = c(1:13)
seq
seq = c(seq(1,12,by=3))
seq
my_values= c(1, 2, 3)
names(my_values) = c("a", "b", "c")
my_values
my_values[3]
names = c("a", "b")
names[1:2]
names[1:2]
names[1:2]
names = c("a", "b")
names[1:2]
names[1:2]
names[1:2]
names = c("a", "b")
names[1:2]
names[1]
setwd("~/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-6 ðŸ‘‰ Factors and Lists in R")
# Statistical Summary of Numeric items
participants_age = c(78, 25, 68, 45, 48, 36)
summary(participants_age)
# Finding summary of characters
profession = c("Doctor", "Teacher", "Teacher", "Businessman", "Teacher")
summary(profession)
# converting factor into vector
profession = factor(profession)
summary(profession)
# Putting the summary in order, if I am creating summary of i.e 100 participant
birth_month = c("Jan", "Dec", "Apr", "Aug", "Jan", "Jun", "Mar", "Apr", "Jul", "Aug", "Sep", "Apr", "Oct", "Jul", "Sep")
summary(birth_month)
birth_month_fact = factor(birth_month)
birth_month_fact
summary(birth_month_fact)
birth_month_fact = factor(birth_month,
ordered = TRUE,
levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
summary(birth_month_fact)
a = c(2, 4, 7)
b = c("Red", "Green", "Blue")
c = "welcome!"
my_list = list(a, b, c)
my_list
my_list = list(Pieces = a, Colors = b, message = c)
my_list
# Calling a specific data structure
my_list[1]
# Calling a specific data structure
my_list[2]
# Calling a specific data structure
my_list[3]
my_list["Colors"]
my_list$Pieces
my_list$Colors
my_list$message
my_list$Colors[1]
my_list$Colors[3]
my_list$Colors[5]
