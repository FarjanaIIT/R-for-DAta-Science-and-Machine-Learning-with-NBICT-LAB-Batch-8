as.Date("1971-11-23")
as.numeric(c("001", "02", "3"))
as.numeric(c(TRUE, FALSE, TRUE))
as.logical(c(1, 1, 1, 1, 0, 0, 0, 1, 1))
summary(S)
Smoke<- c("Smoker", "nonsmoker", "Smoker", "Smoker", "nonsmoker")
S<- as.factor(Smoke)
summary(S)
table(S)
numeric_vector <- c(1, 2, 3, 4, 5)
# Concatenation of character strings
string_vector <- c("apple", "orange", "banana")
# Concatenation of numeric and character vectors
mixed_vector <- c(1, "two", 3, "four")
# Concatenation of vectors into a new vector
combined_vector <- c(numeric_vector, string_vector)
# Display the results
print(numeric_vector)
print(string_vector)
print(mixed_vector)
print(combined_vector)
# Data Frames
# A data frame is more general than a matrix.
id<-1:4
age <- c(12, 21, 13, 14)
sex <- c("male", "female", "female", "male")
school <- c(TRUE, TRUE, TRUE, FALSE)
names(mydata) <- c("id", "age", "sex", "school")  # variable names
mydata <- data.frame(id, age, sex, school)
names(mydata)
id = 1:10
name = c("Kamal", "Jamal", "Ramal", "Humen", "Kamal", "Hamal", "Qamal", "Sumen", "Juthi", "Bithi")
glucose_level = c(4.5, 5.6, 7.8, 7.6, 4.5, 6.7, 9.0, 10, 2.9, 10)
sua_level = c(5, 6, 7, 8, 9, 10, 7, 8, 9, 13)
mydata = data.frame(id, name, glucose_level, sua_level)
names(mydata)
summary(mydata)
names(mydata)
names(mydata) <- c("id", "age", "sex", "school")  # variable names
mydata
names(mydata)
mydata
dim(mydata)
# There are various ways to identify elements of a data frame.
mydata[2:3]               # columns 2,3 of data framemydata[1,4]
# There are various ways to identify elements of a data frame.
mydata[2:3]              # columns 2,3 of data framemydata[1,4]
mydata$id                 # variable id in the data frame
mydata$id[1]               # variable id in the data frame
# There are various ways to identify elements of a data frame.
mydata[2:3]              # columns 2,3 of data framemydata[1,4]
table(mydata$sex)
summary(mydata)
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
mode(dataset)
library(DescTools)
mode(dataset)
library(psych)
attach(psych)
attach("psych")
library("psych")
describe(dataset)
library("DescTools")
describe(dataset)
mode(dataset)
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
library(ggplot2)
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7, color = "red", fill = "red")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
myCarData = mtcars
View(myCarData)
View(myCarData)
View(dataset)
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "count", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333333") +
theme_minimal()
mtcars
ggplot(myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
mycardata = mtcars
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = (cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = numeric(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
ggplot(mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
mycardata = mtcars
View(myCarData)
ggplot(data = mycardata, aes(x = (cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
install.packages(writexl)
install.packages("writexl")
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
dataset = read.csv(my_data.csv)
library(ggplot2)
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len, fill = len)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic()
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", wideth = 0.5, color = "black") + theme_classic() +
geom_text(aes(label = len), vjust = 0.5, color = "blue")
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") + theme_classic() +
geom_text(aes(label = len), vjust = 0.5, color = "blue")
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") + theme_classic() +
geom_text(aes(label = len), vjust = 0.5, color = "blue") +
scale_color_brewer(palette = "Dark2" )
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") +
geom_text(aes(label = len), vjust = 0.5, color = "blue") +
scale_color_brewer(palette = "Dark2" )
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", width = 0.5, color = "black") +
geom_text(aes(label = len), vjust = 0.5, color = "blue")
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "white") +
scale_color_brewer(palette = "Dark2") # search on color brewer pallets in r.
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", color = "blue") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "white") +
scale_color_manual(values = c("white", "red", "blue"))  # search on hexadecimal color picker
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", color = "blue") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "red", "Black"))
ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
ggplot(dataset, aes(x = dose, y = len, fill = dose, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p
p + scale_fill_manual(values = c("white", "red", "black"))
p = ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
p + scale_fill_manual(values = c("white", "red", "blue"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity") +
theme_minimal()
p + scale_fill_manual(values = c("white", "red", "blue"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", fill = "red") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
p = ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
p = ggplot(dataset, aes(x = dose, y = len, color = dose)) +
geom_bar(stat = "identity") +
scale_color_manual(values = c("white", "blue", "Black"))
p + scale_fill_manual(values = c("white", "red", "black"))
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
library(ggplot2)
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
ggplot(dataset, aes(x = dose, y = len, fill = dose)) +
geom_bar(stat = "identity", color = "black") +
scale_color_manual(values = c("#85713a", "#c72ce6", "#f00a24")) +
theme(legend.position = "none")
myData$dose = as.factor(myData$dose)
myData = ToothGrowth
myData$dose = as.factor(myData$dose)
class(myData$dose)
# Basic boxplot
library(ggplot2)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_barplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_barplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_barplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_bar()
ggplot(myData, aes(x = dose, y = len)) +
geom_bar(stat = identity)
ggplot(myData, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot(myData, aes(x = dose, y = len)) +
geom_bar(stat = "count")
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot() +
coord_flip()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = F)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() +
scale_x_discrete(limits = c("2", "0.5"))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() + coord_flip() +
scale_x_discrete(limits = c("2", "0.5"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3) +
scale_x_discrete(limits = c("0.5", "2"))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 7, outlier.size = 3)
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.9))
setwd("/Users/farjanaislam/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-37 👉 One-way ANOVA in R (Part-1) ")
Plant growth <- Plant growth
PlantGrowth <- PlantGrowth
library(dplyr)
stat <- PlantGrowth
stat <- PlantGrowth %>%
View(PlantGrowth)
View(PlantGrowth)
stat <- PlantGrowth %>%
group_by(group)
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
library(dplyr)
stat <- PlantGrowth %>%
group_by(group)
stat <- PlantGrowth %>%
group_by(group)
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
stat <- PlantGrowth %>%
group_by(group) %>%
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
stats <- PlantGrowth %>%
stats <- PlantGrowth %>%
group_by(group) %>%
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
stats <- PlantGrowth %>%
group_by(group) %>%
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
stats <- PlantGrowth %>%
group_by(group) %>%
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
stats <- PlantGrowth %>%
group_by(group) %>%
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
stats <- PlantGrowth %>%
group_by(group) %>%
summarize(
mean = mean(weight),
sd = sd(weight),
se = sd(weight) / sqrt(n())
)
print(stats)
boxplot(weight ~ group,
data = PlantGrowth,
main = "PlantGrowth data",
ylab = "Dried weight of plants",
col = "lightgray",
)
boxplot(weight ~ group,
data = PlantGrowth,
main = "PlantGrowth data",
ylab = "Dried weight of plants",
col = "lightgray"
)
install.packages("ggpubr")
library(ggpubr)
library(ggplot2)
ggline(PlantGrowth,
x = "group",
y = "weight",
add = c("mean_se", "jitter"))
# Running the ANOVA test
anova <- aov(weight - group, data = PlantGrowth)
# Running the ANOVA test
anova <- aov(weight ∼ group, data = PlantGrowth)
anova <- aov(weight ∼ group, data = PlantGrowth)
# Running the ANOVA test
anova <- aov(weight ∼ group, data = PlantGrowth)
anova <- aov(weight ∼ group, data = PlantGrowth)
summary(anova)
anova <- aov(weight ~ group, data = PlantGrowth)
summary(anova)
# Running the ANOVA test
anova <- aov(weight ~ group, data = PlantGrowth)
summary(anova)
