summary(stu_data)
summary(stu_data)
summary(stu_data)
stu_data = data.frame(student_names, study_hours, marks, male)
stu_data
summary(stu_data)
study_hours = c(89, 69, 45, 75, 63, 54, 23, 25, 57, 46)
subject_marks = c(79, 53, 71, 57, 63, 54, 74, 77, 61, 69)
student_data = c(study_hours, subject_marks)
student_data
study_hours_mat = matrix(study_hours)
study_hours_mat
students_data_new = matrix(student_data, byrow = FALSE, nrow = 10)
students_data_new
students_data_new = matrix(student_data, byrow = TRUE, nrow = 10)
students_data_new
students_data_new = matrix(student_data, byrow = TRUE, nrow = 20)
students_data_new
colnames(students_data_new) = c("Hours", "Marks")
students_data_new = matrix(student_data, byrow = TRUE, nrow = 10)
students_data_new
colnames(students_data_new) = c("Hours", "Marks")
colnames(students_data_new)
students_data_new
rownames(students_data_new) = c(1:10)
students_data_new
mean(stu_data$study_hours)
summary(stu_data)
students_data_new[4,1]
gender_fact = factor(gender)
student_names = c('Mr1', 'Ms2', 'Ms3', 'Mr4', 'Ms5')
study_hours = c(20, 24, 46, 62, 22)
marks = c(40, 55, 69, 54, 45)
gender = c('Male', 'Female', 'Female', 'Male', 'Female')
male = c(TRUE, FALSE, FALSE, TRUE, FALSE)
gender_fact = factor(gender)
gender_fact
gender_fact = as.factor(gender)
gender_fact
profession = c("Doctor", "Teacher", "Teacher", "Businessman", "Teacher")
summary(profession)
profession = factor(profession)
summary(profession)
summary(gender_fact)
stu_data = data.frame(student_names, study_hours, marks, gender)
stu_data
summary(stu_data)
stu_data = data.frame(student_names, study_hours, marks, gender_fact)
stu_data
summary(stu_data)
stu_data = data.frame(student_names, study_hours, marks, male)
stu_data
summary(stu_data)
participants_age = c(78, 25, 68, 45, 48, 36)
summary(participants_age)
profession = c("Doctor", "Teacher", "Teacher", "Businessman", "Teacher")
summary(profession)
profession = factor(profession)
summary(profession)
a = c(2, 4, 7)
b = c("Red", "Green", "Blue")
c = "welcome!"
my_list = list(a, b, c)
my_list
my_list = list(Pieces = a, Colors = b, message = c)
my_list
student_names = c('Mr1', 'Ms2', 'Ms3', 'Mr4', 'Ms5')
study_hours = c(20, 24, 46, 62, 22)
marks = c(40, 55, 69, 54, 45)
gender = c('Male', 'Female', 'Female', 'Male', 'Female')
stu_data = data.frame(student_names, study_hours, marks, gender_fact)
stu_data
summary(stu_data)
mean(stu_data)
mean(stu_data$student_names)
stu_data = data.frame(student_names, study_hours, marks, gender_fact)
stu_data
summary(stu_data)
mean(stu_data$student_names)
stu_data = data.frame(student_names, study_hours, marks, male)
stu_data
summary(stu_data)
mean(stu_data$study_hours)
mean(stu_data$student_names)
mean(stu_data$study_hours)
student_data = matrix(study_hours, subject_marks)
study_hours = c(89, 69, 45, 75, 63, 54, 23, 25, 57, 46)
subject_marks = c(79, 53, 71, 57, 63, 54, 74, 77, 61, 69)
student_data = matrix(study_hours, subject_marks)
student_data = c(study_hours, subject_marks)
student_data
students_data_mat = matrix(student_data)
students_data_mat
students_data_mat = matrix(student_data, byrow = FALSE, nrow = 10)
students_data_mat
colnames(students_data_mat) = matrix("Hours", "Marks")
colnames(students_data_mat) = c("Hours", "Marks")
colnames(students_data_mat)
names(colnames)
colnames(students_data_mat) = c("Hours", "Marks")
students_data_mat
rownames(students_data_mat) = c(1:10)
students_data_mat
students_data_mat[3]
students_data_mat[3:1]
students_data_mat[3,1]
students_data_mat$studyhours
summary(students_data_mat)
student_data = c(study_hours, subject_marks)
student_data
stu_data_mat = matrix(student_data)
stu_data_mat
stu_data_mat = matrix(student_data, byrow = FALSE, nrow = 10)
stu_data_mat
colnames(stu_data_mat) = c('Hours', 'Marks')
stu_data_mat
rownames(stu_data_mat) = c(1:10)
stu_data_mat
stu_data_mat[4]
summary(stu_data_mat)
print(stu_data_mat)
is.logical(stu_data_mat)
stu_data_mat_factor = as.factor(stu_data_mat)
stu_data_mat_factor
stu_data_mat
my_list = list("study_hours", "gender")
my_list
my_list[1]
my_list = list("study_hours" = a, "gender" =b)
my_list
my_list$study_hours
my_list$study_hours[2]
View(stu_data)
View(stu_data)
View(my_list)
View(my_list)
data_frame = data.frame("student_names", "study_hours", "marks", "gender" )
data_frame
summary(data_frame)
summary(data_frame)
data_frame = data.frame(student_names, study_hours, marks, gender )
summary(data_frame)
print(data_frame)
mean(data_frame$study_hours)
data_frame$study_hours[2]
data_frame$gender[2]
View(data_frame)
View(data_frame)
a = c(2, 4, 7)
b = c("Red", "Green", "Blue")
c = "welcome!"
my_list = list(a, b, c)
my_list
my_list = list(Pieces = a, Colors = b, message = c)
my_list
my_list[3]
my_list["Colors"] # another way to find specific data in a vector
# another way to find specific data in a vector
my_list$Pieces
my_list$Colors[1]
subject_marks = c(79, 53, 71, 57, 63, 54, 74, 77, 61, 69)
study_hours = c(89, 69, 45, 75, 63, 54, 23, 25, 57, 46)
subject_marks = c(79, 53, 71, 57, 63, 54, 74, 77, 61, 69)
student_data = c(study_hours, subject_marks)
student_data
study_hours_mat = matrix(study_hours)
study_hours_mat
students_data_new = matrix(student_data, byrow = TRUE, nrow = 10)
students_data_new
colnames(students_data_new) = c("Hours", "Marks")
students_data_new
rownames(students_data_new) = c(1:10)
students_data_new
students_data_new[4,1]
student_data = c(study_hours, subject_marks)
student_data
students_data_mat = matrix(student_data)
students_data_mat
students_data_mat = matrix(student_data, byrow = FALSE, nrow = 10)
students_data_mat
colnames(students_data_mat) = c("Hours", "Marks")
names(colnames)
colnames(students_data_mat) = c("Hours", "Marks")
students_data_mat
rownames(students_data_mat) = c(1:10)
students_data_mat
students_data_mat[3,1]
students_data_mat$studyhours
summary(students_data_mat)
student_data = c(study_hours, subject_marks)
student_data
stu_data_mat = matrix(student_data, byrow = FALSE, nrow = 10)
stu_data_mat
colnames(stu_data_mat) = c('Hours', 'Marks')
stu_data_mat
rownames(stu_data_mat) = c(1:10)
stu_data_mat
stu_data_mat[4]
summary(stu_data_mat)
print(stu_data_mat)
is.logical(stu_data_mat)
stu_data_mat_factor = as.factor(stu_data_mat)
stu_data_mat
student_names = c('Mr1', 'Ms2', 'Ms3', 'Mr4', 'Ms5')
study_hours = c(20, 24, 46, 62, 22)
marks = c(40, 55, 69, 54, 45)
gender = c('Male', 'Female', 'Female', 'Male', 'Female')
data_frame = data.frame(student_names, study_hours, marks, gender )
data_frame
print(data_frame)
data_frame$gender[2]
my_list = list("study_hours" = a, "gender" =b)
my_list
my_list[1]
my_list$study_hours[2]
study_hours = c(89, 69, 45, 75, 63, 54, 23, 25, 57, 46)
subject_marks = c(79, 53, 71, 57, 63, 54, 74, 77, 61, 69)
student_data = c(study_hours, subject_marks)
student_data
study_hours_mat
students_data_new
students_data_new
students_data_new
students_data_new = matrix(student_data, byrow = TRUE, nrow = 10)
students_data_new
rownames(students_data_new) = c(1:10)
students_data_new
students_data_new[4,1]
student_data
study_hours = c(89, 69, 45, 75, 63, 54, 23, 25, 57, 46)
subject_marks = c(79, 53, 71, 57, 63, 54, 74, 77, 61, 69)
student_data = c(study_hours, subject_marks)
student_data
student_data_matrix = matrix(student_data)
student_data_matrix
student_data_matrix = matrix(student_data, byrow = FALSE, nrow = 5)
student_data_matrix
student_data_matrix[1]
student_data_matrix[1:9]
student_data_matrix[1,3]
mean(student_data$study_hours)
summary(student_data)
summary(student_data_matrix)
mean(student_data)
mode(student_data)
mode(student_data)
median(student_data)
mean(student_data)
colnames(student_data_matrix) = matrix(Hours, Marks)
colnames(student_data_matrix) = c(Hours, Marks)
colnames(student_data_matrix) = c("Hours", "Marks")
colnames(student_data_matrix) = matrix("Hours", "Marks")
colnames(student_data) = c("Hours", "Marks")
colnames(student_data) = c(Hours, Marks)
colnames(student_data_matrix) = c(Hours, Marks)
colnames(student_data_matrix) = c("Hours", "Marks")
student_data_matrix = matrix(student_data, byrow = FALSE, nrow = 10)
student_data_matrix
colnames(student_data_matrix) = c("Hours", "Marks")
student_data_matrix
rownames(student_data_matrix) = c(1:10)
student_data_matrix
colnames(student_data_matrix) = c("Time", "Score")
student_data_matrix
a = 11
b = 7.19
class(a)
class(b)
print(name)
name = 'Farjana Islam'
print(name)
class(name)
class(c)
c = '52' # if I don't want to involve into mathamateical.
print(c + 9)
c = '52'
class(c)
# Logical Data Type - TRUE, FALSE (T, F)
print(a < b) # < is called relational operator
x = 19 # 19n is assigned to x
y = 22-3
print(x == y) # == is called equal to operator
print(x !=y) # == is called not equal to operator
print(y > x)
print(y >=x) # >= is called greater than equal to operator
4 == 4 && 5 ==5
4 == 5 && 5 ==5
x = 19 # 19n is assigned to x
y = 22-3
x != y || x == y
z = 6 + 9 - 8 * (2 / 3)
print(z)
summary(z)
print(z)
w = 4 + 3 -3 * 2 / 3
print(w)
y = 4^3
print(y)
11 / 5 # modulo operator,
11 %/% 5 # if we don't want to see decimal.
11 %% 5 # to see remainer
11 %/% 5
11 %% 5
11 / 5
x = (my_height * my_age) / my_weight
# Calculating some health parameter
my_age = 97
my_weight = 60
my_height = 65
x = (my_height * my_age) / my_weight
print(x)
print(x)
print(x)
summary(x)
mean(x)
print(students_height)
students_height = c(50, 55, 64, 71, 45.25)
print(students_height)
median(students_height)
mode(students_height)
class(students_height)
students_height_new = as.character(students_height)
students_height_new
students_height_new = as.logical(students_height)
students_height_new
# Creating a vector using the c() command, if I want to keep multiple values in one variable
student_height = c(60, 69, 55, 62)
student_height
# check the class of vectors student_height
is.numeric(student_height) # whether it is numeric data type, it will logical data
is.logical(student_height) # if I check it is logical data type, it will logical data
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
d
d = as.logical(d)
d
e = c(1, 0, 0, 1, 0, 23, -7, 0)
e = as.logical(e)
e
# Creating sequential vector by using clone using c() command
# Creating a vector starting from 1 to 10
my_seq = c(1:50, 80, 99, 88, 60, 77, 71, 61, 92, 97) # if I want to give break
my_seq
# Creating sequential vector using seq() function
new_seq = c(seq(1,10))
# sequence in steps of 3 by using "by" parameter
new_seq = c(seq(1, 10, by=3))
new_seq
class(names)
class(names)
# vectors can have character
names = c("Elias", "Mahfuza", "Asraf")
class(names)
names[1:3] # we can say ranges by using clone
# Assigning names to vector values
my_values = c(4, 7, 9, 11)
names(my_values) = c("a", "b", "c", "d")
my_values
my_values["d"]
print(my_values)
student_height = c(60, 69, 55, 62)
student_height
# check the class of vectors student_height
is.numeric(student_height) # whether it is numeric data type, it will logical data
is.logical(student_height) # if I check it is logical data type, it will logical data
student_height_new = as.character(student_height)
student_height_new
b = c(5, 8, 2, "sv")
b
is.numeric(b)
is.logical(b)
is.character(b)
# we can convert data types
# for example from numeric to character
a = c(1, 2, 3, 4, 5)
class(a)
class(student_height)
is.numeric(a)
a = as.character(a) # way of update the conversion of data type from numeric to string
class(a)
d = c(TRUE, FALSE, FALSE, TRUE, FALSE)
d = as.numeric(d)
student_height_new
d = as.numeric(d)
d
d = c(1, 0, 9, 8, -1, 0, 0)
d_new = as.numeric(d)
d_new
my_seq = c(1:50)
my_seq
my_seq = c(seq(1,10, 12, 13))
my_seq = c(seq(1,10)
my_seq
new_seq = c(seq(1,10)
new_seq
new_seq = c(seq(1,50)
new_seq
new_seq = c(seq(1,50))
new_seq
new_seq = c(seq(1,5, 10, 9, 20))
new_seq = c(seq(1,5, 10, 11, 12))
new_seq = c(seq(1,5,10,11,12))
new_seq = c(seq(1:5,10,11,12))
new_seq
new_seq = c(seq(1:5,10,11,12))
new_seq
my_seq = c(seq(1,5))
my_seq
my_seq = c(seq(1,5, by = 2))
my_seq
my_seq = c(1:3, 4, 5, 6)
my_seq
names = c("Abid", "Elisas", "Juthi")
names[1]
is.numeric(names)
names = as.logical(names)
names
abid = c(TRUE, FALSE, FALSE)
names = as.logical(abid)
names
summary(names)
names[1:2]
my_list
my_list = list(a, b, c)
names(my_list) = list(2, 4, 7)
my_list
my_values = c(2, 4, 7)
names(my_values) = c("a", "b", "c")
my_values
my_values[2]
my_values["b"]
my_values["c"]
my_list = list(1, 2, 3, 45, 5)
names(my_list) = list("a", "b", "c", "d", "e")
my_list
my_list$b
my_list[2]
a = c(1, 2, 3)
b = c("Abid", "Juthi", "Rahim")
c = "Welcome"
my_list = list(a, b, c)
names(my_list) = list(pieces = a, names = b, text =c)
my_list
a = c(1, 2, 3)
b = c("Abid", "Juthi", "Rahim")
c = "Welcome"
my_list = list(a, b, c)
names(my_list) = list(pieces = a, names = b, text =c)
my_list
a = c(2, 4, 7)
b = c("Red", "Green", "Blue")
c = "welcome!"
my_list = list(a, b, c)
my_list
a = c(1, 2, 3)
b = c("Abid", "Juthi", "Rahim")
c = "Welcome"
my_list = list(a, b, c)
names(my_list) = list(pieces = a, names = b, text =c)
my_list
my_list = list(pieces = a, names = b, text =c)
my_list
names(my_list) = list(pieces = a, names = b, text =c)
my_list
my_list = list(pieces = a, names = b, text =c)
my_list
my_list[a]
my_list[a]
my_list$pieces
my_list$names[2]
a
b
c
hist(a)
a = c(1, 2, 5, 6)
hist(a)
setwd("/Users/farjanaislam/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-8 👉 Descriptive Statistics in R")
install.packages("psych")
library(psych)
data()
AirPassengers
BOD
BJsales
install.packages("nycflights13")
attach(nycflights13::flights)
head(nycflights13::flights)
library(nycflights13)
attach(nycflights13::flights)
head(nycflights13::flights)
library(nycflights13)
attach(nycflights13::flights)
attach(nycflights13::flights)
attach(nycflights13::flights)
head(nycflights13::flights)
head(nycflights13::flights)
library(nycflights13)
attach(nycflights13::flights)
head(nycflights13::flights)
attach(nycflights13::flights)
attach(nycflights13::flights)
head(nycflights13::flights)
summary(nycflight13)
install.packages("nycflights13")
attach(nycflights13::flights)
describe(distance)
data()
AirPassengers
BOD
BJsales
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
