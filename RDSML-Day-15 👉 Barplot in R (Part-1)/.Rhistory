plot + theme()
plot + theme_set()
plot + theme_void()
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl,shape = cyl)) + geom_point() + geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE)
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl,shape = cyl)) + geom_point() + geom_smooth()
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl,shape = cyl)) + geom_point() + geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE)
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, aes(fill = cyl)) # it will give confidence interval according to multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, aes(fill = cyl)) # it will give confidence interval according to multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, aes(fill = cyl)) # it will give confidence interval according to multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, aes(fill = cyl)) # it will give confidence interval according to multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, aes(fill = cyl)) # it will give confidence interval according to multiple groups
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
labs(title = "Miles per gallon \naccording to the weight",
x = "Weight", y = "milles/gallon") +
theme(legend.position = "top")
plot = ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
labs(title = "Miles per gallon \naccording to the weight",
x = "Weight", y = "milles/gallon") +
theme(legend.position = "top")
plot = ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
labs(title = "Miles per gallon \naccording to the weight",
x = "Weight", y = "milles/gallon") +
theme(legend.position = "top")
plot = ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
labs(title = "Miles per gallon \naccording to the weight",
x = "Weight", y = "milles/gallon") +
theme(legend.position = "top")
plot + theme_classic()
plot + theme_minimal()
plot + theme_dark()
plot + theme_classic()
plot + theme_linedraw()
plot + theme_update()
plot + theme_get()
plot + theme_set()
plot + theme_void()
plot + theme
plot + theme()
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c("yellow", "red", "blue")) +
theme(legend.position = "top")
library(ggplot2)
dataset = mtcars
dataset$cyl
class(cyl)
class(dataset$cyl)
factor = as.factor(dataset$cyl)
class(dataset$cyl)
dataset$cyl = as.factor(dataset$cyl)
class(dataset$cyl)
summary(dataset$cyl)
mean(dataset$cyl)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method =lm)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method =lm, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE, color = cyl)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE, color = cyl)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method =lm, color = cyl)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE, aes(fill = cyl))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE, aes(fill = cyl))
ggplot(dataset, aes(x = wt, y = mpg,  color = cyl, shape = cyl)) +
geom_point() + geom_smooth(method = lm, aes(fill = cyl)) # it will give confidence interval according to multiple groups
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, fullrange = TRUE, aes(fill = cyl))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  aes(fill = cyl))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  aes(fill = cyl))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  aes(fill = cyl), fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE)
+ scale_shape_manual(values = c(3, 6, 9))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey"))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = top)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "top") +
labs(title = "Million per gallon /n according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "top") +
labs(title = "Million per gallon /naccording to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "top") +
labs(title = "Million per gallon according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "top") +
labs(title = "Million per gallon \naccording to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "top") +
labs(title = "Million per gallon \n according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(3, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "bottom") +
labs(title = "Million per gallon \n according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(34, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "bottom") +
labs(title = "Million per gallon \n according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(2, 6, 9)) +
scale_color_manual(values = c("yellow", "red", "grey")) +
theme(legend.position = "bottom") +
labs(title = "Million per gallon \n according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(2, 6, 9)) +
scale_color_manual(values = c("blue", "red", "grey")) +
theme(legend.position = "bottom") +
labs(title = "Million per gallon \n according to weight", x = "Weight", y = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm,  se = FALSE, aes(fill = cyl), fullrange = TRUE) +
scale_shape_manual(values = c(2, 7, 9)) +
scale_color_manual(values = c("blue", "red", "grey")) +
theme(legend.position = "bottom") +
labs(title = "Million per gallon \n according to weight", x = "Weight", y = "Million per gallon")
library(ggplot2)
dataset = mtcars
datasets = mtcars
dataset$cyl
dataset$cyl = as.factor(dataset$cyl)
class(dataset$cyl)
ggplot(dataset, aes(x = wt, y = mpg) + geom_point() + geom_smooth(method = lm))
ggplot(dataset, aes(x = wt, y = mpg) + geom_point() + geom_smooth(method = lm))
ggplot(dataset, aes(x = wt, y = mpg) + geom_point() + geom_smooth(method = lm))
library(ggplot2)
ggplot(dataset, aes(x = wt, y = mpg) + geom_point() + geom_smooth(method = lm))
dataset = mtcars
dataset$cyl
dataset$cyl = as.factor(dataset$cyl)
ggplot(dataset, aes(x = wt, y = mpg) + geom_point() + geom_smooth(method = lm))
ggplot(dataset, aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = lm))
ggplot(dataset, aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = lm))
ggplot(dataset, aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, aes(fill = cyl), fullrange = TRUE)
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(datasets, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 5, 6))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 5, 6))
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 5, 6)) + scale_color_manual(values = c("blue", "yellow", "red")) +
theme(legend.position = "top") + lab = (title = "Million per gallon")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 5, 6)) + scale_color_manual(values = c("blue", "yellow", "red")) +
theme(legend.position = "top")
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) + geom_point() + geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
scale_shape_manual(values = c(3, 5, 6)) + scale_color_manual(values = c("blue", "yellow", "red")) +
theme(legend.position = "top") + labs(title = "million per gallon")
plot+theme_classic()
plot+theme_bw()
write.csv(my_data, "my_data.csv", row.names = FALSE)
library(ggplot2)
dataset = mtcars
write.csv(mpg, "mpg.csv", row.names = FALSE)
#Arithmetic Operators
a <- 5
b <- 2
c<- a+b
c
d <- a*b
d
print(d)
##Day-1#
#Overview of statistical methods and setup R and Rstudio
##Day-2##
#Some common operators
#Arithmetic Operators:
# + (Addition)
# - (Subtraction)
# * (Multiplication)
# / (Division)
# ^ (Exponentiation)
# %% (Modulo - remainder of division)
# %/% (Integer division)
#Arithmetic Operators
a <- 5
b <- 2
c<- a+b
c
d <- a*b
d
print(d)
addition_result <- a + b
subtraction_result <- a - b
multiplication_result <- a * b
division_result <- a / b
exponentiation_result <- a^b
modulo_result <- a %% b
integer_division_result <- a %/% b
#Explanation of the last one: integer_division_result#
#a: The variable a is assigned the value 5.
#b: The variable b is assigned the value 2.
#a %/% b: This expression performs integer division of a by b.
#Integer division means that the result will be the quotient of the division, rounded down to the nearest integer.
#In this case, 5 divided by 2 is 2.5,but since we're using %/%, the result will be 2 (the integer part of the quotient).
#So, after running this code, the variable integer_division_result will be assigned the value 2,
#which is the result of the integer division of a by b. If you were using regular division with /, the result would be 2.5.
# Print above syntax output
print(addition_result)
print(subtraction_result)
print(multiplication_result)
print(division_result)
print(exponentiation_result)
print(modulo_result)
print(integer_division_result)
#Practice
x <- 2 #assigns 2 to x
p <- c(3, 2, 2) #Concatenation
q <- c(3, 2, 2) + c(1, 0, 1) #Addition
z<- c(3, 2, 2) - 4 #Subtraction
x<- c(3, 2, 2) * c(-1, 1, 1) #Multiplication
3/2 #Division
4^2 #Exponentiation
seq(1, 10, 0.5) #Sequence from a to b by h
1:10
4:9 #Sequence operator (steps of 1)
id <-(1:100)
#Some common functions
sqrt(9) #Square root
log(3) #Natural log
exp(0.5) #Exponential function
round(2.36) #Rounding
round(2.66) #Rounding
round(3.5447,2)
sum(c(1, 4, -2)) #Sum of elements
cumsum(c(2, 5, 3)) #Cumulative sum of elements
prod(c(1, 4, -2)) #Product of elements
cumprod(c(2, 5, 3)) #Cumulative product of elements
cat("\014") #clear R console
q() #Quit R
#Arithmetic Operators
a <- 5
b <- 2
c<- a+b
c
d <- a*b
d
print(d)
a
print(d)
#Practice
x <- 2 #assigns 2 to x
p <- c(3, 2, 2) #Concatenation
q <- c(3, 2, 2) + c(1, 0, 1) #Addition
z<- c(3, 2, 2) - 4 #Subtraction
x<- c(3, 2, 2) * c(-1, 1, 1) #Multiplication
3/2 #Division
4^2 #Exponentiation
p
q
z
x
3/2 #Division
4^2 #Exponentiation
3 %/% 2
3 %% 2
1:10
4:9 #Sequence operator (steps of 1)
id <-(1:100)
id
id <-(1:100)
id
log(3) #Natural log
#Some common functions
sqrt(9) #Square root
exp(0.5) #Exponential function
round(2.36) #Rounding
round(2.66) #Rounding
round(3.5447,2)
attach(nycflights13::flights) # it gives datasets, needs to give attach
attach(nycflights13::flights)
head(nycflights13::flights)
summary(distance) # summary function will not give details.summary base function of R
describe(distance)
# install.packages("psych")
library(psych)
data()
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
distance
summary(distance)
describe(distance)
setwd("/Users/farjanaislam/Documents/SUST/R-for-DAta-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-15 👉 Barplot in R (Part-1)")
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4, 2, 10, 29, 5))
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5))
View(dataset)
dataset = data.frame(dose = c("D0.5", "D1", "D2"),
len = c(4.2, 10, 29.5),
gsg = c(45, 77, 7))
write.csv(dataset, "my_data.csv")
library(ggplot2)
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar()
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar()
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "dodge")
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "stack")
# Basic barplot
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_equal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.5)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.5, alpha = 0.2)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7)
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7, color = "red")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7, color = "red", fill = "red")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", binwidth = 0.7, color = "red", fill = "red")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.7, color = "red", fill = "red")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue")
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
label_both()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
label_both(values = c(3, 4))
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len)) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 2) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 3) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 5) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -5) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -4) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -2) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5) +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "blue") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333398") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = -1, size = 3.5, color = "#333000") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "#333333") +
theme_minimal()
ggplot(data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = len), vjust = 1.6, size = 3.5, color = "white") +
theme_minimal()
myCarData = mtcars
View(myCarData)
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count")
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5)
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "blue")
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue")
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.5, fill = "steelblue") +
theme_minimal()
